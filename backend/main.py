import os
import sys
from pathlib import Path
from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from dotenv import load_dotenv
import uvicorn
from datetime import datetime, timezone
import logging
from database import initialize_database
import requests

# üö® CONFIGURA√á√ÉO GLOBAL DO REQUESTS - GARANTIR QUE N√ÉO H√Å HEADERS PADR√ÉO
# Limpar qualquer configura√ß√£o global que possa interferir
requests.adapters.DEFAULT_RETRIES = 0  # Desabilitar retries autom√°ticos

# Verificar se n√£o h√° sess√£o global configurada
print("üîß STARTUP: Verificando configura√ß√£o global do requests...")
default_session = requests.Session()
print(f"üîß STARTUP: Headers padr√£o da sess√£o: {dict(default_session.headers)}")
if default_session.headers:
    print("‚ö†Ô∏è STARTUP: Limpando headers padr√£o da sess√£o global...")
    default_session.headers.clear()
print("‚úÖ STARTUP: Sess√£o requests limpa")

# Carregar vari√°veis de ambiente
load_dotenv()

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Criar aplica√ß√£o FastAPI
app = FastAPI(
    title="VigIA Backend", 
    version="1.0.0",
    description="API para monitoramento de pre√ßos do Mercado Livre"
)

# Configurar CORS
origins = [
    "https://vigia-meli.vercel.app",
    "http://localhost:3000",
]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
    expose_headers=["*"],
    max_age=600
)

# Event handlers
@app.on_event("startup")
async def startup_event():
    logger.info("üöÄ VigIA Backend iniciando...")
    logger.info(f"üìÖ Timestamp: {datetime.now(timezone.utc)}")
    logger.info(f"üåê Frontend URL: {os.getenv('FRONTEND_URL', 'http://localhost:3000')}")
    
    # Verificar vari√°veis essenciais
    database_url = os.getenv('DATABASE_URL')
    ml_client_id = os.getenv('ML_CLIENT_ID')
    
    # Inicializar banco de dados
    if database_url:
        logger.info("üóÑÔ∏è Iniciando configura√ß√£o do banco de dados...")
        db_success = initialize_database()
        
        logger.info("üóÑÔ∏è Database Status:")
        logger.info(f"  - Configurado: {'‚úÖ' if database_url else '‚ùå'}")
        logger.info(f"  - Engine: {'‚úÖ' if db_success else '‚ùå'}")
        logger.info(f"  - Conex√£o: {'‚úÖ' if db_success else '‚ùå'}")
        logger.info(f"  - Tabelas: {'‚úÖ' if db_success else '‚ùå'}")
        logger.info(f"  - Tipo: postgresql")
        
        if not db_success:
            logger.warning("‚ö†Ô∏è Banco configurado mas com problemas - algumas funcionalidades podem falhar")
    else:
        logger.error("‚ùå DATABASE_URL n√£o configurada - funcionalidades de banco n√£o estar√£o dispon√≠veis")
    
    logger.info(f"üõí ML Client: {'‚úÖ Configurado' if ml_client_id else '‚ùå N√ÉO CONFIGURADO'}")
    
    if not database_url:
        logger.warning("‚ö†Ô∏è DATABASE_URL n√£o configurada - algumas funcionalidades podem n√£o funcionar")

# Importar e incluir rotas (com tratamento de erro)
try:
    from routers import router
    from mercadolivre import ML_API_URL  # Importar para verifica√ß√£o
    app.include_router(router)
    logger.info("‚úÖ Rotas carregadas com sucesso")
    logger.info(f"üîó ML API URL configurada: {ML_API_URL}")
except ImportError as e:
    logger.error(f"‚ùå Erro ao importar rotas: {e}")
    # Criar rotas b√°sicas como fallback
    @app.get("/")
    def root_fallback():
        return {
            "message": "VigIA Backend rodando! üöÄ",
            "error": "Algumas rotas podem n√£o estar dispon√≠veis"
        }

# Exception handlers
@app.exception_handler(404)
async def not_found_handler(request, exc):
    logger.warning(f"‚ùå 404 - Endpoint n√£o encontrado: {request.url}")
    return JSONResponse(
        status_code=404,
        content={
            "detail": "Endpoint n√£o encontrado",
            "url": str(request.url),
            "method": request.method,
            "available_endpoints": [
                "GET /",
                "GET /health",
                "POST /auth/register", 
                "POST /auth/login",
                "GET /test/mercadolivre",
                "GET /docs"
            ]
        }
    )

@app.exception_handler(405)
async def method_not_allowed_handler(request, exc):
    logger.warning(f"‚ùå 405 - M√©todo n√£o permitido: {request.method} {request.url}")
    return JSONResponse(
        status_code=405,
        content={
            "detail": f"M√©todo {request.method} n√£o permitido para este endpoint",
            "url": str(request.url),
            "tip": "Verifique se est√° usando POST para login/register e GET para busca"
        }
    )

@app.exception_handler(500)
async def internal_error_handler(request, exc):
    logger.error(f"‚ùå 500 - Erro interno: {exc}")
    return JSONResponse(
        status_code=500,
        content={
            "detail": "Erro interno do servidor",
            "message": "Tente novamente em alguns momentos"
        }
    )

# Rotas b√°sicas
@app.get("/")
def root():
    return {
        "message": "VigIA Backend rodando! üöÄ",
        "version": "1.0.0",
        "status": "online",
        "timestamp": datetime.now(timezone.utc).isoformat(),
        "docs": "/docs",
        "health": "/health"
    }

@app.get("/health")
async def health():
    """Endpoint de verifica√ß√£o de sa√∫de"""
    try:
        # Verificar conex√£o com banco
        from database import test_database_connection
        database_status = "ok" if test_database_connection() else "error"
        
        return {
            "status": "ok",
            "timestamp": datetime.now(timezone.utc).isoformat(),
            "version": "1.0.0",
            "database": database_status,
            "environment": os.getenv("RAILWAY_ENVIRONMENT", "development"),
            "cors_origins": origins
        }
    except Exception as e:
        logger.error(f"Erro no health check: {e}")
        return JSONResponse(
            status_code=503,
            content={
                "status": "error", 
                "message": str(e),
                "database": "error"
            }
        )

# Endpoint de diagn√≥stico
@app.get("/debug/info", summary="Informa√ß√µes de debug e compliance ML 2025")
def debug_info():
    """
    Informa√ß√µes de debug e compliance OAuth 2.0 ML 2025
    (apenas para desenvolvimento)
    """
    return {
        "python_version": sys.version,
        "working_directory": os.getcwd(),
        "ml_oauth_compliance": "2025_OAUTH_2.0_PKCE_REQUIRED",
        "documentation": "https://developers.mercadolivre.com.br/pt_br/autenticacao-e-autorizacao",
        "environment_vars": {
            "DATABASE_URL": "‚úÖ Set" if os.getenv('DATABASE_URL') else "‚ùå Not Set",
            "ML_CLIENT_ID": "‚úÖ Set" if os.getenv('ML_CLIENT_ID') else "‚ùå Not Set",
            "FRONTEND_URL": os.getenv('FRONTEND_URL', 'Not Set'),
            "PORT": os.getenv('PORT', 'Not Set'),
            "ML_OAUTH_REDIRECT": os.getenv('ML_REDIRECT_URI', 'Default: /api/auth/callback/mercadolivre')
        }
    }

# Para execu√ß√£o local
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 8000))
    uvicorn.run("main:app", host="0.0.0.0", port=port, reload=True)